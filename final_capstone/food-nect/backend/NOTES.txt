//  DB          : persist data                              : user_table
//  Model       : entity (pojo)                             : class User { ... ... }
//  Repository  : interface/DAO                             :
//  Services    : DAO implementations/ interact with db     :
//  Controllers : serve APIs                                :

//  Services (Services calls Repository) use JPA methods to interact with db and Controller calls Services




1. Schema vs Table:
    Schema: blueprint (db name, table name, fields name and data types etc.)
    Table: rows and columns to hold data

2. Annotations:
    @Entity                                                 //model class (pojo representing table). Note: if @Table() is not provided Hibernate assumes your entity/class name maps to the table name
    @Table(name="user_tbl")                                 //map this pojo to "user_tbl"   (use if there are more than one table in db)
    public class UserEntity {
        @Id                                                     //primary key in this table
        @GeneratedValue(strategy = GenerationType.IDENTITY)     //this field is autogenerated
        //@Column(name="id")                                    //map below variable to "id" column in the table (can be omitted if the table field name matches)
        private int id;
        private String userName;
    }
    //if no table exists in db, it will create one and populate with supplied data for your
    //db name is passed in src> main> resources> application.properties, along with other db connection configurations

3.


